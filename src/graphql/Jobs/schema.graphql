type Query {
    getJob(id: ID, orderBy: orderBy): [Job!]!
}

type quantityAppliedJob {
  quantity: Int!
}

type Job {
    name: String!
    description: String!
    numberPositions: Int!
    publishedBy: User!
    jobAvailable: jobAvailable
    categoryType: Category!
    quantityAppliedToJob: quantityAppliedJob!
}


type Category {
    name: String!
    description: String!
}

type Mutation {
  publishJob(data: publishJobInput!): Job!
  applyToJob(userId: ID, jobId: ID): Job!
}


input publishJobInput {
  name: String!
  description: String!
  numberPositions: Int!
  publishedBy: Int!
  jobAvailable: jobAvailable
  categoryId: Int!
}


enum jobAvailable {
    YES,
    NO
}

input orderBy {
  id: orderByArgs
  name: orderByArgs
  publishedBy: orderByArgs
  createdAt: orderByArgs
  updatedAt: orderByArgs
}

enum orderByArgs {
  desc,
  asc
}